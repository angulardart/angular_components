// Copyright (c) 2016, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// #############################################################################
//
// WARNING: DO NOT IMPORT DIRECTLY OUTSIDE OF
// LIB/CSS/MATERIAL
//
// #############################################################################

// Useful and reusable pieces of common css.

// Forces an element to take up the same space as its closest, positioned
// ancestor or, if none exists, the root element.
@mixin fit {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

// clearfix forces the containing element to contain and be the same height as
// the floated child elements.
@mixin clearfix() {
  &::before,
  &::after {
    content: ' ';
    display: table;
  }

  &::after {
    clear: both;
  }
}

// Styles text that is used as a floating label over a material component.
@mixin mat-input-header() {
  color: $mat-gray-600;
  @include mat-type-caption();
}

// *************************************
//      Icon helpers
// *************************************

// TODO(google): remove icon-button and glyph-button in favor of a more
// standard way of creating glyph buttons (e.g. a glyph button component)
@mixin icon-button(
    $icon-url, $button-size: 6 * $mat-grid, $icon-size: 3 * $mat-grid) {

  @include clear-button();
  font-size: 0;
  height: $button-size;
  outline: none;
  width: $button-size;

  // Icon is in after pseudo element to isolate opacity fiddling.
  &::after {
    @include icon-background($icon-url, $button-size, $icon-size);
    content: '';
    display: block;
    opacity: $mat-icon-opacity;
    left: 0;
    position: absolute;
    top: 0;
    transition: opacity $mat-transition-standard $mat-transition;
  }

  // Light theme - default
  &:focus::after,
  &:hover::after,
  &:active::after {
    opacity: $mat-icon-opacity-hover;
  }

  &:disabled::after {
    opacity: $mat-icon-opacity-disabled;
  }

  // Dark theme
  &.dark::after {
    opacity: $mat-icon-dark-opacity;
  }

  &.dark:focus::after,
  &.dark:hover::after,
  &.dark:active::after {
    opacity: $mat-icon-dark-opacity-hover;
    outline: none;
  }

  &.dark:disabled::after {
    opacity: $mat-icon-dark-opacity-disabled;
  }
}

// Similar to icon button, but to be used with a button containing an
// `<glyph>` element.
@mixin glyph-button($button-size: 6 * $mat-grid, $circle: false) {

  @include clear-button();
  height: $button-size;
  opacity: $mat-icon-opacity;
  outline: none;
  padding: 0;
  transition: opacity $mat-transition-standard $mat-transition;
  width: $button-size;

  @if $circle {
    border-radius: $button-size / 2;
  }

  // Light theme - default
  &:focus,
  &:hover,
  &:active {
    opacity: $mat-icon-opacity-hover;
  }

  &:disabled {
    opacity: $mat-icon-opacity-disabled;
  }

  // Dark theme
  &.dark {
    opacity: $mat-icon-dark-opacity;
  }

  &.dark:focus,
  &.dark:hover,
  &.dark:active {
    opacity: $mat-icon-dark-opacity-hover;
    outline: none;
  }

  &.dark:disabled {
    opacity: $mat-icon-dark-opacity-disabled;
  }
}

@mixin clear-button() {
  background-color: transparent;
  border: 0;
  color: inherit;
  cursor: pointer;
  display: block;
  font-family: inherit;
  position: relative;
}

// Note: this only supports square icons.
@mixin icon-background(
    $icon-url, $background-size: 6 * $mat-grid, $icon-size: 3 * $mat-grid) {

  @include box-sizing(border-box);
  @include flex-shrink(0);
  @include flex-grow(0);

  background-image: mat-icon-image($icon-url);
  background-position: center center;
  background-repeat: no-repeat;
  background-size: $icon-size $icon-size;
  height: $background-size;
  padding: (($background-size - $icon-size) / 2);
  width: $background-size;
}

// Style all scrollbars within the specified selector to Material spec.
// This is an unscoped rule, so it will affect all elements nested inside the
// given selector, anywhere on the page.
// $thumb-hover-color should be a Material color matching your app's theme.
@mixin material-scrollbars($selector, $thumb-hover-color) {
  ::ng-deep #{$selector} ::-webkit-scrollbar {
    background-color: $mat-scrollbar-background;

    // Height only applies to horizontal scrollbars
    height: $mat-grid;

    // Width only applies to vertical scrollbars
    width: $mat-grid;
  }

  ::ng-deep #{$selector} ::-webkit-scrollbar:hover {
    background-color: $mat-scrollbar-background-hover;
  }

  ::ng-deep #{$selector} ::-webkit-scrollbar-thumb {
    background-color: $mat-scrollbar-thumb;

    // min-height only applies to vertical scrollbar thumbs
    min-height: 6 * $mat-grid;

    // min-width only applies to horizontal scrollbar thumbs
    min-width: 6 * $mat-grid;
  }

  ::ng-deep #{$selector} ::-webkit-scrollbar-thumb:hover {
    background-color: $thumb-hover-color;
  }

  ::ng-deep #{$selector} ::-webkit-scrollbar-button {
    width: 0;
    height: 0;
  }
}

// *** Deprecated
// The following functions are deprecated.
// The equivalent native CSS is available in all supported browsers.

@mixin box-sizing($type:border-box) {
  -moz-box-sizing: $type; // Firefox < 29
  box-sizing: $type;      // Chrome, IE 8+, Opera, Safari 5.1
}
