// Copyright (c) 2016, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'dart:html';

import 'package:angular2/angular2.dart';
import 'package:intl/intl.dart';

import '../../model/a11y/active_item_mixin.dart';
import '../../model/selection/selection_container.dart';
import '../../model/selection/selection_model.dart';
import '../../model/ui/has_renderer.dart';
import '../../utils/angular/properties/properties.dart';
import '../../utils/browser/dom_service/dom_service.dart';
import '../../utils/disposer/disposer.dart';
import '../button_decorator/button_decorator.dart';
import '../dynamic_component/dynamic_component.dart';
import '../glyph/glyph.dart';
import '../material_checkbox/material_checkbox.dart';
import '../mixins/material_dropdown_base.dart';
import './activation_handler.dart';

/// Material Select Item is a special kind of list item which can be selected.
@Component(
    selector: 'material-select-item',
    inputs: const [
      'disabled', // Is item disabled. Inherited from [ButtonDirective]
      'active', // from ActiveItemMixin
    ],
    outputs: const ['trigger'],
    host: const {
      'class': 'item',
      '[class.disabled]': 'disabled',
      '[class.active]': 'active',
      '[class.selected]': 'isSelected',
      '[class.multiselect]': 'supportsMultiSelect',
      '(click)': r'handleClick($event)',
      '(keypress)': r'handleKeyPress($event)',
      '[attr.aria-disabled]': 'disabledStr',
      '(mouseenter)': 'onMouseEnter()',
      '(mouseleave)': 'onMouseLeave()',
      'tabindex': '0',
      'role': 'option'
    },
    providers: const [
      const Provider(SelectionItem, useExisting: MaterialSelectItemComponent),
      const Provider(HasRenderer, useExisting: MaterialSelectItemComponent)
    ],
    styleUrls: const ['material_select_item.scss.css'],
    directives: const [
      GlyphComponent,
      MaterialCheckboxComponent,
      NgIf,
      DynamicComponent
    ],
    templateUrl: 'material_select_item.html')
class MaterialSelectItemComponent extends ButtonDirective
    with ActiveItemMixin
    implements OnDestroy, SelectionItem, HasRenderer, HasComponentRenderer {
  final _disposer = new Disposer.oneShot();
  final ActivationHandler _activationHandler;
  final DropdownHandle _dropdown;

  @override
  final HtmlElement element;

  @override
  final DomService domService;

  MaterialSelectItemComponent(ElementRef elementRef, this.domService,
      @Optional() this._dropdown, @Optional() this._activationHandler)
      : element = elementRef.nativeElement,
        super(elementRef) {
    _disposer.addStreamSubscription(trigger.listen(handleActivate));
  }

  /// The value this selection item represents.
  ///
  /// If the object implements [HasUIDisplayName], it will render use
  /// the `uiDisplayName` field as the label for the item. Otherwise, the label
  /// is only generated by this component if an [ItemRenderer] is provided
  /// (via the `itemRenderer` property).
  @override
  dynamic get value => _value;
  @Input()
  @override
  set value(val) {
    _value = val;
    _genLabel();
  }

  dynamic _value;

  bool _supportsMultiSelect = false;

  /// Whether the container supports selecting multiple items.
  bool get supportsMultiSelect => _supportsMultiSelect;

  /// Whether to hide the checkbox.
  ///
  /// False by default.
  bool get hideCheckbox => _hideCheckbox;
  @Input()
  set hideCheckbox(value) {
    _hideCheckbox = getBool(value);
  }

  bool _hideCheckbox = false;

  /// A function to render an item as a String.
  ///
  /// If none is provided, no label is generated (labels can still be passed
  /// as content).
  @override
  ItemRenderer get itemRenderer => _itemRenderer;
  @Input()
  @override
  set itemRenderer(ItemRenderer value) {
    _itemRenderer = value;
    _genLabel();
  }

  ItemRenderer _itemRenderer = nullRenderer;

  /// Returns a type for dynamic component loader to use to render item.
  ///
  /// Use instead of manual label or item renderer.
  @Input()
  @override
  ComponentRenderer componentRenderer;

  bool get useCheckMarks => _useCheckMarks;

  /// If true, check marks are used instead of checkboxes to indicate whether or
  /// not the item is selected for multi-select items.
  ///
  /// This particular style is used in material menu dropdown for multi-select
  /// menu item groups.
  @Input()
  set useCheckMarks(value) {
    _useCheckMarks = getBool(value);
  }

  bool _useCheckMarks = false;

  // Generates and stashes the item's label.
  void _genLabel() {
    if (_value == null) {
      _label = null;
    } else if (componentRenderer == null &&
        !identical(itemRenderer, nullRenderer)) {
      _label = itemRenderer(_value);
    }
  }

  String _label;
  bool get valueHasLabel => _label != null && componentRenderer == null;
  String get valueLabel => _label;

  /// Selection model to update with changes.
  @override
  SelectionModel get selection => _selection;
  @Input()
  @override
  set selection(SelectionModel sel) {
    _selection = sel;
    _supportsMultiSelect = sel is MultiSelectionModel;
  }

  SelectionModel _selection;

  /// Manually mark items selected.
  bool get selected => _selected;
  @Input()
  set selected(value) {
    _selected = getBool(value);
  }

  bool _selected = false;

  /// Whether to cause dropdown to be closed on activation.
  ///
  /// True by default.
  bool get closeOnActivate => _closeOnActivate;
  @Input()
  set closeOnActivate(value) {
    _closeOnActivate = getBool(value);
  }

  bool _closeOnActivate = true;

  Type get componentType =>
      componentRenderer != null ? componentRenderer(value) : null;

  /// Whether this item should be marked as selected.
  bool get isSelected => _isMarkedSelected || _isSelectedInSelectionModel;

  bool get _isMarkedSelected => selected != null && selected;
  bool get _isSelectedInSelectionModel =>
      value != null && (_selection?.isSelected(value) ?? false);

  void handleActivate(UIEvent e) {
    if (closeOnActivate && _selection is! MultiSelectionModel) {
      _dropdown?.close();
    }

    if (_activationHandler?.handle(e, value) ?? false) return;
    if (_selection != null && value != null) {
      if (_selection.isSelected(value)) {
        _selection.deselect(value);
      } else {
        _selection.select(value);
      }
    }
  }

  @override
  void ngOnDestroy() {
    _disposer.dispose();
  }

  String get selectedMessage => Intl.message('Click to deselect',
      name: 'selectedMessage',
      desc: 'Label for an icon describing possible interactions with a '
          'selected menu item.');

  String get notSelectedMessage => Intl.message('Click to select',
      name: 'notSelectedMessage',
      desc: 'Label for an icon describing possible interactions with a '
          'non-selected menu item.');
}
