import 'dart:html';

import 'package:angular/angular.dart';
import 'package:angular_router/angular_router.dart';
import 'package:logging/logging.dart';
import 'package:angular_components/laminate/popup/module.dart';
import 'package:angular_components/laminate/overlay/module.dart';
import 'package:angular_components/material_datepicker/module.dart';
import 'package:angular_gallery/gallery/gallery_tokens.dart';
import '{{{ galleryImportUri }}}' as app;
{{# hasBinding }}
import '{{{ bindingImport }}}' as binding;
{{/ hasBinding }}

import 'main.template.dart' as ng;

Logger _logger = Logger("angular_dart_gallery");

ComponentRef<app.GalleryComponent> gallery;

void main() {
  Logger.root.onRecord.listen((x) => print("${x.level}: ${x.message}"));

  // Start angular.
  gallery = runApp(app.GalleryComponentNgFactory, createInjector: galleryInjector);
}

/// The [onReloadStart] method is invoked immediately after the call to
/// dart_library.reload(), and the app will be in the same state as it was
/// before the reload. After this call, all invalidated modules will be
/// reloaded.
void onReloadStart() {
  gallery.destroy();
}

@Injectable()
HtmlElement materialContentElement(Document document) {
  return document.querySelector('material-content');
}

@GenerateInjector([
  routerProvidersHash,
  popupBindings,
  datepickerBindings,
  Provider(overlayContainerParent, useFactory: materialContentElement),
  ValueProvider.forToken(bugUrl, '{{{ bugUrl }}}'),
  ValueProvider.forToken(sourcecodeUrl, '{{{ sourcecodeUrl }}}'),
  {{# hasBinding }}
  binding.{{ bindingName }},
  {{/ hasBinding }}
])

final InjectorFactory galleryInjector = ng.galleryInjector$Injector;
